/* TrixTech s.r.o. @2025 */

window.TranslateWidget = {
  name: 'TranslateWidget',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_translateWidget' ||
    trace.payload?.name === 'ext_translateWidget',

  render: ({ trace, element }) => {
    const lang = (trace.payload?.lang || 'cs').toLowerCase().startsWith('en') ? 'en' : 'cs';
    const label = lang === 'cs'
      ? 'Zvolený jazyk je: 🇨🇿 Čeština'
      : 'Language in use: 🇺🇸 English';

    const container = document.createElement('div');
    container.className = 'vfrc-message vfrc-message--extension TranslateWidget';

    const style = document.createElement('style');
    style.textContent = `
      .vfrc-message.vfrc-message--extension.TranslateWidget {
        opacity: 1;
        transition: opacity 0.3s ease-out;
        width: 100%;
        display: block;
      }
      .vfrc-message.vfrc-message--extension.TranslateWidget.hide {
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
      }
      .translate-box {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        margin-bottom: 8px;
        width: 100%;
        box-sizing: border-box;
        background-color: #F9FAFB;
        border-radius: 12px;
        border: 1px solid #E5E7EB;
      }
      .translate-text {
        flex: 1;
        min-width: 0;
        color: rgba(26, 30, 35, 0.7);
        font-size: 12px;
        line-height: 1.3;
        font-family: var(--_1bof89na);
        font-style: italic;
        display: flex;
        flex-direction: column;
        opacity: 1;
        transform: translateY(0);
        transition: opacity 0.3s ease-out, transform 0.3s ease-out;
      }
      button.vfrc-button[label="Start new chat"]::before {
        content: "${lang === 'cs' ? 'Spustit nový chat' : 'Start new chat'}" !important;
      }
      button.vfrc-button[label="Cancel"]::before {
        content: "${lang === 'cs' ? 'Zrušit' : 'Cancel'}" !important;
      }
      #vfrc-start-chat::before {
        content: "${lang === 'cs' ? 'Spustit nový chat' : 'Start new chat'}" !important;
      }
      .dio4eo4::before {
        content: "${lang === 'cs' ? 'Poznejte město Litovel' : 'Discover the city of Litovel'}" !important;
        font-size: 16px !important;
        color: #656d75 !important;
      }
      .dio4eo5::before {
        content: "${lang === 'cs' ? 'prostřednictvím našeho AI asistenta' : 'through our AI assistant'}" !important;
        font-size: 14px !important;
        color: #656d75 !important;
      }
      .ticwq62::before {
        content: "${lang === 'cs' ? 'Chat byl ukončen' : 'Chat has ended'}" !important;
      }
      ._11kfxpg7::before {
        content: "${lang === 'cs' ? 'Odpověď byla generována pomocí AI' : 'The response was generated by AI'}" !important;
      }
    `;

    const text = document.createElement('span');
    text.className = 'translate-text';
    text.textContent = label;

    const box = document.createElement('div');
    box.className = 'translate-box';
    box.appendChild(text);

    container.appendChild(style);
    container.appendChild(box);

    const deepQuerySelector = (root, selector) => {
      const found = root.querySelector(selector);
      if (found) return found;
      for (const el of root.querySelectorAll('*')) {
        if (el.shadowRoot) {
          const nested = deepQuerySelector(el.shadowRoot, selector);
          if (nested) return nested;
        }
      }
      return null;
    };

    const updateTexts = () => {
      const placeholder = lang === 'cs' ? 'Napište váš dotaz...' : 'Enter your query...';
      const launcherText = lang === 'cs' ? 'Potřebujete pomoct?' : 'Need help with anything?';

      const textarea = deepQuerySelector(document, 'textarea.vfrc-chat-input');
      if (textarea) textarea.placeholder = placeholder;

      const launcherDiv = deepQuerySelector(document, 'div.fptyqm0.fptyqm1._15s29m9a');
      if (launcherDiv) launcherDiv.textContent = launcherText;

      const launcherBtn = deepQuerySelector(document, 'button.vfrc-launcher');
      if (launcherBtn) launcherBtn.title = launcherText;
    };

    updateTexts();

    const observer = new MutationObserver(updateTexts);
    observer.observe(document, { subtree: true, childList: true, characterData: true });

    element.innerHTML = '';
    element.appendChild(container);
  }
};